// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: mod_disco_models.proto

package v2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysAccountRefId  string                 `protobuf:"bytes,1,opt,name=sys_account_ref_id,json=sysAccountRefId,proto3" json:"sys_account_ref_id,omitempty"`
	SelectedCountry  string                 `protobuf:"bytes,2,opt,name=selected_country,json=selectedCountry,proto3" json:"selected_country,omitempty"`
	SelectedCity     string                 `protobuf:"bytes,3,opt,name=selected_city,json=selectedCity,proto3" json:"selected_city,omitempty"`
	SelectedAgeRange string                 `protobuf:"bytes,4,opt,name=selected_age_range,json=selectedAgeRange,proto3" json:"selected_age_range,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetSysAccountRefId() string {
	if x != nil {
		return x.SysAccountRefId
	}
	return ""
}

func (x *UserInfo) GetSelectedCountry() string {
	if x != nil {
		return x.SelectedCountry
	}
	return ""
}

func (x *UserInfo) GetSelectedCity() string {
	if x != nil {
		return x.SelectedCity
	}
	return ""
}

func (x *UserInfo) GetSelectedAgeRange() string {
	if x != nil {
		return x.SelectedAgeRange
	}
	return ""
}

func (x *UserInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type NewUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysAccountRefId    string `protobuf:"bytes,1,opt,name=sys_account_ref_id,json=sysAccountRefId,proto3" json:"sys_account_ref_id,omitempty"`
	SysAccountRefEmail string `protobuf:"bytes,2,opt,name=sys_account_ref_email,json=sysAccountRefEmail,proto3" json:"sys_account_ref_email,omitempty"`
	SelectedCountry    string `protobuf:"bytes,3,opt,name=selected_country,json=selectedCountry,proto3" json:"selected_country,omitempty"`
	SelectedCity       string `protobuf:"bytes,4,opt,name=selected_city,json=selectedCity,proto3" json:"selected_city,omitempty"`
	SelectedAgeRange   string `protobuf:"bytes,5,opt,name=selected_age_range,json=selectedAgeRange,proto3" json:"selected_age_range,omitempty"`
}

func (x *NewUserInfo) Reset() {
	*x = NewUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserInfo) ProtoMessage() {}

func (x *NewUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserInfo.ProtoReflect.Descriptor instead.
func (*NewUserInfo) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{1}
}

func (x *NewUserInfo) GetSysAccountRefId() string {
	if x != nil {
		return x.SysAccountRefId
	}
	return ""
}

func (x *NewUserInfo) GetSysAccountRefEmail() string {
	if x != nil {
		return x.SysAccountRefEmail
	}
	return ""
}

func (x *NewUserInfo) GetSelectedCountry() string {
	if x != nil {
		return x.SelectedCountry
	}
	return ""
}

func (x *NewUserInfo) GetSelectedCity() string {
	if x != nil {
		return x.SelectedCity
	}
	return ""
}

func (x *NewUserInfo) GetSelectedAgeRange() string {
	if x != nil {
		return x.SelectedAgeRange
	}
	return ""
}

type UpdateUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysAccountRefId  string `protobuf:"bytes,1,opt,name=sys_account_ref_id,json=sysAccountRefId,proto3" json:"sys_account_ref_id,omitempty"`
	SelectedCountry  string `protobuf:"bytes,2,opt,name=selected_country,json=selectedCountry,proto3" json:"selected_country,omitempty"`
	SelectedCity     string `protobuf:"bytes,3,opt,name=selected_city,json=selectedCity,proto3" json:"selected_city,omitempty"`
	SelectedAgeRange string `protobuf:"bytes,4,opt,name=selected_age_range,json=selectedAgeRange,proto3" json:"selected_age_range,omitempty"`
}

func (x *UpdateUserInfo) Reset() {
	*x = UpdateUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfo) ProtoMessage() {}

func (x *UpdateUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfo.ProtoReflect.Descriptor instead.
func (*UpdateUserInfo) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserInfo) GetSysAccountRefId() string {
	if x != nil {
		return x.SysAccountRefId
	}
	return ""
}

func (x *UpdateUserInfo) GetSelectedCountry() string {
	if x != nil {
		return x.SelectedCountry
	}
	return ""
}

func (x *UpdateUserInfo) GetSelectedCity() string {
	if x != nil {
		return x.SelectedCity
	}
	return ""
}

func (x *UpdateUserInfo) GetSelectedAgeRange() string {
	if x != nil {
		return x.SelectedAgeRange
	}
	return ""
}

type UserInfoValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: fakesize:60 fake:{country}
	Countries []string `protobuf:"bytes,2,rep,name=countries,proto3" json:"countries,omitempty"`
	// @inject_tag: fakesize:1000 fake:{city}
	Cities []string `protobuf:"bytes,3,rep,name=cities,proto3" json:"cities,omitempty"`
	// @inject_tag: fakesize:8 fake:{daterange}
	SelectedAgeRanges []string `protobuf:"bytes,4,rep,name=selected_age_ranges,json=selectedAgeRanges,proto3" json:"selected_age_ranges,omitempty"`
}

func (x *UserInfoValues) Reset() {
	*x = UserInfoValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoValues) ProtoMessage() {}

func (x *UserInfoValues) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoValues.ProtoReflect.Descriptor instead.
func (*UserInfoValues) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{3}
}

func (x *UserInfoValues) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfoValues) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *UserInfoValues) GetCities() []string {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *UserInfoValues) GetSelectedAgeRanges() []string {
	if x != nil {
		return x.SelectedAgeRanges
	}
	return nil
}

type SupportRoleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyProjectRefId string `protobuf:"bytes,2,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Comment            string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Description        string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	UnitOfMeasures     string `protobuf:"bytes,6,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
}

func (x *SupportRoleType) Reset() {
	*x = SupportRoleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportRoleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportRoleType) ProtoMessage() {}

func (x *SupportRoleType) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportRoleType.ProtoReflect.Descriptor instead.
func (*SupportRoleType) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{4}
}

func (x *SupportRoleType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportRoleType) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *SupportRoleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SupportRoleType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SupportRoleType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SupportRoleType) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

type NewSupportRoleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"survey_project_ref_id,omitempty"
	SurveyProjectRefId string `protobuf:"bytes,1,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty" fake:"skip" yaml:"survey_project_ref_id,omitempty"`
	// @inject_tag: fake:"skip" yaml:"survey_project_ref_name,omitempty"
	SurveyProjectRefName string `protobuf:"bytes,2,opt,name=survey_project_ref_name,json=surveyProjectRefName,proto3" json:"survey_project_ref_name,omitempty" fake:"skip" yaml:"survey_project_ref_name,omitempty"`
	// @inject_tag: fake:"{nameseq:support_role_type,false,none,false,false}" yaml:"name,omitempty"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" fake:"{nameseq:support_role_type,false,none,false,false}" yaml:"name,omitempty"`
	// @inject_tag: fake:"{sentence:8}" yaml:"comment,omitempty"
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty" fake:"{sentence:8}" yaml:"comment,omitempty"`
	// @inject_tag: fake:"{jobtitle}" yaml:"description,omitempty"
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" fake:"{jobtitle}" yaml:"description,omitempty"`
	// @inject_tag: fake:"{randomstring:[days,weeks,months]}" yaml:"unit_of_measures,omitempty"
	UnitOfMeasures string `protobuf:"bytes,6,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty" fake:"{randomstring:[days,weeks,months]}" yaml:"unit_of_measures,omitempty"`
}

func (x *NewSupportRoleType) Reset() {
	*x = NewSupportRoleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSupportRoleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSupportRoleType) ProtoMessage() {}

func (x *NewSupportRoleType) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSupportRoleType.ProtoReflect.Descriptor instead.
func (*NewSupportRoleType) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{5}
}

func (x *NewSupportRoleType) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *NewSupportRoleType) GetSurveyProjectRefName() string {
	if x != nil {
		return x.SurveyProjectRefName
	}
	return ""
}

func (x *NewSupportRoleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewSupportRoleType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NewSupportRoleType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewSupportRoleType) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

type SupportRoleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyUserRefId      string `protobuf:"bytes,2,opt,name=survey_user_ref_id,json=surveyUserRefId,proto3" json:"survey_user_ref_id,omitempty"`
	SupportRoleTypeRefId string `protobuf:"bytes,3,opt,name=support_role_type_ref_id,json=supportRoleTypeRefId,proto3" json:"support_role_type_ref_id,omitempty"`
	Pledged              uint64 `protobuf:"varint,4,opt,name=pledged,proto3" json:"pledged,omitempty"`
	Comment              string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *SupportRoleValue) Reset() {
	*x = SupportRoleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportRoleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportRoleValue) ProtoMessage() {}

func (x *SupportRoleValue) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportRoleValue.ProtoReflect.Descriptor instead.
func (*SupportRoleValue) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{6}
}

func (x *SupportRoleValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportRoleValue) GetSurveyUserRefId() string {
	if x != nil {
		return x.SurveyUserRefId
	}
	return ""
}

func (x *SupportRoleValue) GetSupportRoleTypeRefId() string {
	if x != nil {
		return x.SupportRoleTypeRefId
	}
	return ""
}

func (x *SupportRoleValue) GetPledged() uint64 {
	if x != nil {
		return x.Pledged
	}
	return 0
}

func (x *SupportRoleValue) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type NewSupportRoleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" fake:"skip" yaml:"id,omitempty"`
	// @inject_tag: fake:"skip" yaml:"survey_user_ref_id,omitempty"
	SurveyUserRefId string `protobuf:"bytes,2,opt,name=survey_user_ref_id,json=surveyUserRefId,proto3" json:"survey_user_ref_id,omitempty" fake:"skip" yaml:"survey_user_ref_id,omitempty"`
	// @inject_tag: fake:"skip" yaml:"survey_user_ref_name,omitempty"
	SurveyUserRefName string `protobuf:"bytes,3,opt,name=survey_user_ref_name,json=surveyUserRefName,proto3" json:"survey_user_ref_name,omitempty" fake:"skip" yaml:"survey_user_ref_name,omitempty"`
	// @inject_tag: fake:"skip" yaml:"support_role_type_ref_id,omitempty"
	SupportRoleTypeRefId string `protobuf:"bytes,4,opt,name=support_role_type_ref_id,json=supportRoleTypeRefId,proto3" json:"support_role_type_ref_id,omitempty" fake:"skip" yaml:"support_role_type_ref_id,omitempty"`
	// @inject_tag: fake:"{nameseq:support_role_type,true,support_role_type,true,false}" yaml:"support_role_type_ref_name,omitempty"
	SupportRoleTypeRefName string `protobuf:"bytes,5,opt,name=support_role_type_ref_name,json=supportRoleTypeRefName,proto3" json:"support_role_type_ref_name,omitempty" fake:"{nameseq:support_role_type,true,support_role_type,true,false}" yaml:"support_role_type_ref_name,omitempty"`
	// @inject_tag: fake:"{number:1,100}" yaml:"pledged,omitempty"
	Pledged uint64 `protobuf:"varint,6,opt,name=pledged,proto3" json:"pledged,omitempty" fake:"{number:1,100}" yaml:"pledged,omitempty"`
	// @inject_tag: fake:"{sentence:4}" yaml:"comment,omitempty"
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty" fake:"{sentence:4}" yaml:"comment,omitempty"`
}

func (x *NewSupportRoleValue) Reset() {
	*x = NewSupportRoleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSupportRoleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSupportRoleValue) ProtoMessage() {}

func (x *NewSupportRoleValue) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSupportRoleValue.ProtoReflect.Descriptor instead.
func (*NewSupportRoleValue) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{7}
}

func (x *NewSupportRoleValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewSupportRoleValue) GetSurveyUserRefId() string {
	if x != nil {
		return x.SurveyUserRefId
	}
	return ""
}

func (x *NewSupportRoleValue) GetSurveyUserRefName() string {
	if x != nil {
		return x.SurveyUserRefName
	}
	return ""
}

func (x *NewSupportRoleValue) GetSupportRoleTypeRefId() string {
	if x != nil {
		return x.SupportRoleTypeRefId
	}
	return ""
}

func (x *NewSupportRoleValue) GetSupportRoleTypeRefName() string {
	if x != nil {
		return x.SupportRoleTypeRefName
	}
	return ""
}

func (x *NewSupportRoleValue) GetPledged() uint64 {
	if x != nil {
		return x.Pledged
	}
	return 0
}

func (x *NewSupportRoleValue) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type UserNeedsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyProjectRefId string `protobuf:"bytes,2,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Comment            string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Description        string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	UnitOfMeasures     string `protobuf:"bytes,6,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
	QuestionGroup      string `protobuf:"bytes,7,opt,name=question_group,json=questionGroup,proto3" json:"question_group,omitempty"`
	QuestionType       string `protobuf:"bytes,8,opt,name=question_type,json=questionType,proto3" json:"question_type,omitempty"`
	// only filled if the question_type is dropdown
	DropdownQuestion string `protobuf:"bytes,9,opt,name=dropdown_question,json=dropdownQuestion,proto3" json:"dropdown_question,omitempty"`
}

func (x *UserNeedsType) Reset() {
	*x = UserNeedsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNeedsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNeedsType) ProtoMessage() {}

func (x *UserNeedsType) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNeedsType.ProtoReflect.Descriptor instead.
func (*UserNeedsType) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{8}
}

func (x *UserNeedsType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserNeedsType) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *UserNeedsType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserNeedsType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UserNeedsType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UserNeedsType) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

func (x *UserNeedsType) GetQuestionGroup() string {
	if x != nil {
		return x.QuestionGroup
	}
	return ""
}

func (x *UserNeedsType) GetQuestionType() string {
	if x != nil {
		return x.QuestionType
	}
	return ""
}

func (x *UserNeedsType) GetDropdownQuestion() string {
	if x != nil {
		return x.DropdownQuestion
	}
	return ""
}

type NewUserNeedsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"id,omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" fake:"skip" yaml:"id,omitempty"`
	// @inject_tag: fake:"skip" yaml:"survey_project_ref_id,omitempty"
	SurveyProjectRefId string `protobuf:"bytes,2,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty" fake:"skip" yaml:"survey_project_ref_id,omitempty"`
	// @inject_tag: fake:"{nameseq:user_needs_type,false,none,false,false}" yaml:"name,omitempty"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" fake:"{nameseq:user_needs_type,false,none,false,false}" yaml:"name,omitempty"`
	// @inject_tag: fake:"{sentence:4}" yaml:"comment,omitempty"
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty" fake:"{sentence:4}" yaml:"comment,omitempty"`
	// @inject_tag: fake:"{question}" yaml:"description,omitempty"
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" fake:"{question}" yaml:"description,omitempty"`
	// @inject_tag: fake:"{randomstring:[days,weeks,months]}" yaml:"unit_of_measures,omitempty"
	UnitOfMeasures string `protobuf:"bytes,6,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty" fake:"{randomstring:[days,weeks,months]}" yaml:"unit_of_measures,omitempty"`
	// @inject_tag: fake:"{questiongroup}" yaml:"question_group,omitempty"
	QuestionGroup string `protobuf:"bytes,7,opt,name=question_group,json=questionGroup,proto3" json:"question_group,omitempty" fake:"{questiongroup}" yaml:"question_group,omitempty"`
	// @inject_tag: fake:"{questiontype}" yaml:"question_type,omitempty"
	QuestionType string `protobuf:"bytes,8,opt,name=question_type,json=questionType,proto3" json:"question_type,omitempty" fake:"{questiontype}" yaml:"question_type,omitempty"`
	// @inject_tag: fake:"{dropdownquestion}" yaml:"dropdown_question,omitempty"
	DropdownQuestion string `protobuf:"bytes,9,opt,name=dropdown_question,json=dropdownQuestion,proto3" json:"dropdown_question,omitempty" fake:"{dropdownquestion}" yaml:"dropdown_question,omitempty"`
}

func (x *NewUserNeedsType) Reset() {
	*x = NewUserNeedsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserNeedsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserNeedsType) ProtoMessage() {}

func (x *NewUserNeedsType) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserNeedsType.ProtoReflect.Descriptor instead.
func (*NewUserNeedsType) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{9}
}

func (x *NewUserNeedsType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewUserNeedsType) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *NewUserNeedsType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewUserNeedsType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NewUserNeedsType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewUserNeedsType) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

func (x *NewUserNeedsType) GetQuestionGroup() string {
	if x != nil {
		return x.QuestionGroup
	}
	return ""
}

func (x *NewUserNeedsType) GetQuestionType() string {
	if x != nil {
		return x.QuestionType
	}
	return ""
}

func (x *NewUserNeedsType) GetDropdownQuestion() string {
	if x != nil {
		return x.DropdownQuestion
	}
	return ""
}

type UserNeedsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyUserRefId    string `protobuf:"bytes,2,opt,name=survey_user_ref_id,json=surveyUserRefId,proto3" json:"survey_user_ref_id,omitempty"`
	UserNeedsTypeRefId string `protobuf:"bytes,3,opt,name=user_needs_type_ref_id,json=userNeedsTypeRefId,proto3" json:"user_needs_type_ref_id,omitempty"`
	Comments           string `protobuf:"bytes,4,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *UserNeedsValue) Reset() {
	*x = UserNeedsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNeedsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNeedsValue) ProtoMessage() {}

func (x *UserNeedsValue) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNeedsValue.ProtoReflect.Descriptor instead.
func (*UserNeedsValue) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{10}
}

func (x *UserNeedsValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserNeedsValue) GetSurveyUserRefId() string {
	if x != nil {
		return x.SurveyUserRefId
	}
	return ""
}

func (x *UserNeedsValue) GetUserNeedsTypeRefId() string {
	if x != nil {
		return x.UserNeedsTypeRefId
	}
	return ""
}

func (x *UserNeedsValue) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type SurveyValuePlusAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SysAccountUserRefName string                 `protobuf:"bytes,2,opt,name=sys_account_user_ref_name,json=sysAccountUserRefName,proto3" json:"sys_account_user_ref_name,omitempty"`
	Pledged               uint64                 `protobuf:"varint,3,opt,name=pledged,proto3" json:"pledged,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *SurveyValuePlusAccount) Reset() {
	*x = SurveyValuePlusAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyValuePlusAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyValuePlusAccount) ProtoMessage() {}

func (x *SurveyValuePlusAccount) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyValuePlusAccount.ProtoReflect.Descriptor instead.
func (*SurveyValuePlusAccount) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{11}
}

func (x *SurveyValuePlusAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SurveyValuePlusAccount) GetSysAccountUserRefName() string {
	if x != nil {
		return x.SysAccountUserRefName
	}
	return ""
}

func (x *SurveyValuePlusAccount) GetPledged() uint64 {
	if x != nil {
		return x.Pledged
	}
	return 0
}

func (x *SurveyValuePlusAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type NewUserNeedsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"survey_user_ref_name,omitempty"
	SurveyUserRefName string `protobuf:"bytes,1,opt,name=survey_user_ref_name,json=surveyUserRefName,proto3" json:"survey_user_ref_name,omitempty" fake:"skip" yaml:"survey_user_ref_name,omitempty"`
	// @inject_tag: fake:"skip" yaml:"survey_user_ref_id,omitempty"
	SurveyUserRefId string `protobuf:"bytes,2,opt,name=survey_user_ref_id,json=surveyUserRefId,proto3" json:"survey_user_ref_id,omitempty" fake:"skip" yaml:"survey_user_ref_id,omitempty"`
	// @inject_tag: fake:"skip" yaml:"user_needs_type_ref_id,omitempty"
	UserNeedsTypeRefId string `protobuf:"bytes,3,opt,name=user_needs_type_ref_id,json=userNeedsTypeRefId,proto3" json:"user_needs_type_ref_id,omitempty" fake:"skip" yaml:"user_needs_type_ref_id,omitempty"`
	// @inject_tag: fake:"{nameseq:user_needs_type,true,user_needs_type,true,false}" yaml:"user_needs_type_ref_name,omitempty"
	UserNeedsTypeRefName string `protobuf:"bytes,4,opt,name=user_needs_type_ref_name,json=userNeedsTypeRefName,proto3" json:"user_needs_type_ref_name,omitempty" fake:"{nameseq:user_needs_type,true,user_needs_type,true,false}" yaml:"user_needs_type_ref_name,omitempty"`
	// @inject_tag: fake:"{sentence:4}" yaml:"comments,omitempty"
	Comments string `protobuf:"bytes,5,opt,name=comments,proto3" json:"comments,omitempty" fake:"{sentence:4}" yaml:"comments,omitempty"`
}

func (x *NewUserNeedsValue) Reset() {
	*x = NewUserNeedsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserNeedsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserNeedsValue) ProtoMessage() {}

func (x *NewUserNeedsValue) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserNeedsValue.ProtoReflect.Descriptor instead.
func (*NewUserNeedsValue) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{12}
}

func (x *NewUserNeedsValue) GetSurveyUserRefName() string {
	if x != nil {
		return x.SurveyUserRefName
	}
	return ""
}

func (x *NewUserNeedsValue) GetSurveyUserRefId() string {
	if x != nil {
		return x.SurveyUserRefId
	}
	return ""
}

func (x *NewUserNeedsValue) GetUserNeedsTypeRefId() string {
	if x != nil {
		return x.UserNeedsTypeRefId
	}
	return ""
}

func (x *NewUserNeedsValue) GetUserNeedsTypeRefName() string {
	if x != nil {
		return x.UserNeedsTypeRefName
	}
	return ""
}

func (x *NewUserNeedsValue) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type SurveyProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjectId        string                 `protobuf:"bytes,1,opt,name=survey_project_id,json=surveyProjectId,proto3" json:"survey_project_id,omitempty"`
	SysAccountProjectRefId string                 `protobuf:"bytes,2,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty"`
	SupportRoleTypes       []*SupportRoleType     `protobuf:"bytes,3,rep,name=support_role_types,json=supportRoleTypes,proto3" json:"support_role_types,omitempty"`
	UserNeedTypes          []*UserNeedsType       `protobuf:"bytes,4,rep,name=user_need_types,json=userNeedTypes,proto3" json:"user_need_types,omitempty"` // SurveyFilterType in JSON format
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SurveyProjectName      string                 `protobuf:"bytes,7,opt,name=survey_project_name,json=surveyProjectName,proto3" json:"survey_project_name,omitempty"`
}

func (x *SurveyProject) Reset() {
	*x = SurveyProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyProject) ProtoMessage() {}

func (x *SurveyProject) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyProject.ProtoReflect.Descriptor instead.
func (*SurveyProject) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{13}
}

func (x *SurveyProject) GetSurveyProjectId() string {
	if x != nil {
		return x.SurveyProjectId
	}
	return ""
}

func (x *SurveyProject) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *SurveyProject) GetSupportRoleTypes() []*SupportRoleType {
	if x != nil {
		return x.SupportRoleTypes
	}
	return nil
}

func (x *SurveyProject) GetUserNeedTypes() []*UserNeedsType {
	if x != nil {
		return x.UserNeedTypes
	}
	return nil
}

func (x *SurveyProject) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SurveyProject) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SurveyProject) GetSurveyProjectName() string {
	if x != nil {
		return x.SurveyProjectName
	}
	return ""
}

type SurveyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyUserId           string                 `protobuf:"bytes,1,opt,name=survey_user_id,json=surveyUserId,proto3" json:"survey_user_id,omitempty"`
	SurveyProjectRefId     string                 `protobuf:"bytes,2,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty"`
	SysAccountAccountRefId string                 `protobuf:"bytes,3,opt,name=sys_account_account_ref_id,json=sysAccountAccountRefId,proto3" json:"sys_account_account_ref_id,omitempty"`
	SupportRoleValues      []*SupportRoleValue    `protobuf:"bytes,4,rep,name=support_role_values,json=supportRoleValues,proto3" json:"support_role_values,omitempty"`
	UserNeedValues         []*UserNeedsValue      `protobuf:"bytes,5,rep,name=user_need_values,json=userNeedValues,proto3" json:"user_need_values,omitempty"` // serialized to strongly typed stuff in DB
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SurveyProjectRefName   string                 `protobuf:"bytes,8,opt,name=survey_project_ref_name,json=surveyProjectRefName,proto3" json:"survey_project_ref_name,omitempty"`
	SurveyUserName         string                 `protobuf:"bytes,9,opt,name=survey_user_name,json=surveyUserName,proto3" json:"survey_user_name,omitempty"`
}

func (x *SurveyUser) Reset() {
	*x = SurveyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyUser) ProtoMessage() {}

func (x *SurveyUser) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyUser.ProtoReflect.Descriptor instead.
func (*SurveyUser) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{14}
}

func (x *SurveyUser) GetSurveyUserId() string {
	if x != nil {
		return x.SurveyUserId
	}
	return ""
}

func (x *SurveyUser) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *SurveyUser) GetSysAccountAccountRefId() string {
	if x != nil {
		return x.SysAccountAccountRefId
	}
	return ""
}

func (x *SurveyUser) GetSupportRoleValues() []*SupportRoleValue {
	if x != nil {
		return x.SupportRoleValues
	}
	return nil
}

func (x *SurveyUser) GetUserNeedValues() []*UserNeedsValue {
	if x != nil {
		return x.UserNeedValues
	}
	return nil
}

func (x *SurveyUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SurveyUser) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SurveyUser) GetSurveyProjectRefName() string {
	if x != nil {
		return x.SurveyProjectRefName
	}
	return ""
}

func (x *SurveyUser) GetSurveyUserName() string {
	if x != nil {
		return x.SurveyUserName
	}
	return ""
}

type DiscoProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId              string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SysAccountProjectRefId string                 `protobuf:"bytes,2,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty"` // account project id
	SysAccountOrgRefId     string                 `protobuf:"bytes,3,opt,name=sys_account_org_ref_id,json=sysAccountOrgRefId,proto3" json:"sys_account_org_ref_id,omitempty"`             // account org id
	Goal                   string                 `protobuf:"bytes,4,opt,name=goal,proto3" json:"goal,omitempty"`
	AlreadyPledged         uint64                 `protobuf:"varint,5,opt,name=already_pledged,json=alreadyPledged,proto3" json:"already_pledged,omitempty"`
	ActionTime             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`
	ActionLocation         string                 `protobuf:"bytes,7,opt,name=action_location,json=actionLocation,proto3" json:"action_location,omitempty"`
	MinPioneers            uint64                 `protobuf:"varint,8,opt,name=min_pioneers,json=minPioneers,proto3" json:"min_pioneers,omitempty"`
	MinRebelsMedia         uint64                 `protobuf:"varint,9,opt,name=min_rebels_media,json=minRebelsMedia,proto3" json:"min_rebels_media,omitempty"`
	MinRebelsToWin         uint64                 `protobuf:"varint,10,opt,name=min_rebels_to_win,json=minRebelsToWin,proto3" json:"min_rebels_to_win,omitempty"`
	ActionLength           string                 `protobuf:"bytes,11,opt,name=action_length,json=actionLength,proto3" json:"action_length,omitempty"`
	ActionType             string                 `protobuf:"bytes,12,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Category               string                 `protobuf:"bytes,14,opt,name=category,proto3" json:"category,omitempty"`
	Contact                string                 `protobuf:"bytes,15,opt,name=contact,proto3" json:"contact,omitempty"`
	HistPrecedents         string                 `protobuf:"bytes,16,opt,name=hist_precedents,json=histPrecedents,proto3" json:"hist_precedents,omitempty"`
	Strategy               string                 `protobuf:"bytes,17,opt,name=strategy,proto3" json:"strategy,omitempty"`
	VideoUrl               []string               `protobuf:"bytes,18,rep,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	UnitOfMeasures         string                 `protobuf:"bytes,19,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ImageResourceIds       []string               `protobuf:"bytes,22,rep,name=image_resource_ids,json=imageResourceIds,proto3" json:"image_resource_ids,omitempty"`
	ProjectImages          [][]byte               `protobuf:"bytes,23,rep,name=project_images,json=projectImages,proto3" json:"project_images,omitempty"`
}

func (x *DiscoProject) Reset() {
	*x = DiscoProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoProject) ProtoMessage() {}

func (x *DiscoProject) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoProject.ProtoReflect.Descriptor instead.
func (*DiscoProject) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{15}
}

func (x *DiscoProject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DiscoProject) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *DiscoProject) GetSysAccountOrgRefId() string {
	if x != nil {
		return x.SysAccountOrgRefId
	}
	return ""
}

func (x *DiscoProject) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *DiscoProject) GetAlreadyPledged() uint64 {
	if x != nil {
		return x.AlreadyPledged
	}
	return 0
}

func (x *DiscoProject) GetActionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActionTime
	}
	return nil
}

func (x *DiscoProject) GetActionLocation() string {
	if x != nil {
		return x.ActionLocation
	}
	return ""
}

func (x *DiscoProject) GetMinPioneers() uint64 {
	if x != nil {
		return x.MinPioneers
	}
	return 0
}

func (x *DiscoProject) GetMinRebelsMedia() uint64 {
	if x != nil {
		return x.MinRebelsMedia
	}
	return 0
}

func (x *DiscoProject) GetMinRebelsToWin() uint64 {
	if x != nil {
		return x.MinRebelsToWin
	}
	return 0
}

func (x *DiscoProject) GetActionLength() string {
	if x != nil {
		return x.ActionLength
	}
	return ""
}

func (x *DiscoProject) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *DiscoProject) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DiscoProject) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *DiscoProject) GetHistPrecedents() string {
	if x != nil {
		return x.HistPrecedents
	}
	return ""
}

func (x *DiscoProject) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *DiscoProject) GetVideoUrl() []string {
	if x != nil {
		return x.VideoUrl
	}
	return nil
}

func (x *DiscoProject) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

func (x *DiscoProject) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DiscoProject) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DiscoProject) GetImageResourceIds() []string {
	if x != nil {
		return x.ImageResourceIds
	}
	return nil
}

func (x *DiscoProject) GetProjectImages() [][]byte {
	if x != nil {
		return x.ProjectImages
	}
	return nil
}

type NewDiscoProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"sys_account_project_ref_id,omitempty"
	SysAccountProjectRefId string `protobuf:"bytes,1,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty" fake:"skip" yaml:"sys_account_project_ref_id,omitempty"` // account project id
	// @inject_tag: fake:"skip" yaml:"sys_account_org_ref_id,omitempty"
	SysAccountOrgRefId string `protobuf:"bytes,2,opt,name=sys_account_org_ref_id,json=sysAccountOrgRefId,proto3" json:"sys_account_org_ref_id,omitempty" fake:"skip" yaml:"sys_account_org_ref_id,omitempty"` // account org id
	// @inject_tag: fake:"{sentence:8}" yaml:"goal,omitempty"
	Goal string `protobuf:"bytes,3,opt,name=goal,proto3" json:"goal,omitempty" fake:"{sentence:8}" yaml:"goal,omitempty"`
	// @inject_tag: fake:"skip" yaml:"already_pledged,omitempty"
	AlreadyPledged uint64 `protobuf:"varint,4,opt,name=already_pledged,json=alreadyPledged,proto3" json:"already_pledged,omitempty" fake:"skip" yaml:"already_pledged,omitempty"`
	// @inject_tag: fake:"{randomts}" yaml:"action_time"
	ActionTimeNano int64 `protobuf:"varint,5,opt,name=action_time_nano,json=actionTimeNano,proto3" json:"action_time_nano,omitempty" fake:"{randomts}" yaml:"action_time"`
	// @inject_tag: fake:"{city}" yaml:"action_location"
	ActionLocation string `protobuf:"bytes,6,opt,name=action_location,json=actionLocation,proto3" json:"action_location,omitempty" fake:"{city}" yaml:"action_location"`
	// @inject_tag: fake:"{number:100,1000}" yaml:"min_pioneers"
	MinPioneers uint64 `protobuf:"varint,7,opt,name=min_pioneers,json=minPioneers,proto3" json:"min_pioneers,omitempty" fake:"{number:100,1000}" yaml:"min_pioneers"`
	// @inject_tag: fake:"{number:100,150}" yaml:"min_rebels_media"
	MinRebelsMedia uint64 `protobuf:"varint,8,opt,name=min_rebels_media,json=minRebelsMedia,proto3" json:"min_rebels_media,omitempty" fake:"{number:100,150}" yaml:"min_rebels_media"`
	// @inject_tag: fake:"{number:100,150}" yaml:"min_rebels_to_win"
	MinRebelsToWin uint64 `protobuf:"varint,9,opt,name=min_rebels_to_win,json=minRebelsToWin,proto3" json:"min_rebels_to_win,omitempty" fake:"{number:100,150}" yaml:"min_rebels_to_win"`
	// @inject_tag: fake:"{randomstring:[14 days, 13 weeks, 12 months]}" yaml:"action_length"
	ActionLength string `protobuf:"bytes,10,opt,name=action_length,json=actionLength,proto3" json:"action_length,omitempty" fake:"{randomstring:[14 days, 13 weeks, 12 months]}" yaml:"action_length"`
	// @inject_tag: fake:"{randomstring:[environment,global_campaign,poverty]}" yaml:"action_type"
	ActionType string `protobuf:"bytes,11,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty" fake:"{randomstring:[environment,global_campaign,poverty]}" yaml:"action_type"`
	// @inject_tag: fake:"{randomstring:[environment,global_campaign,poverty]}" yaml:"category"
	Category string `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty" fake:"{randomstring:[environment,global_campaign,poverty]}" yaml:"category"`
	// @inject_tag: fake:"{email}" yaml:"contact"
	Contact string `protobuf:"bytes,13,opt,name=contact,proto3" json:"contact,omitempty" fake:"{email}" yaml:"contact"`
	// @inject_tag: fake:"{sentence:8}" yaml:"hist_precedents"
	HistPrecedents string `protobuf:"bytes,14,opt,name=hist_precedents,json=histPrecedents,proto3" json:"hist_precedents,omitempty" fake:"{sentence:8}" yaml:"hist_precedents"`
	// @inject_tag: fake:"{sentence:8}" yaml:"strategy"
	Strategy string `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty" fake:"{sentence:8}" yaml:"strategy"`
	// @inject_tag: fake:"{randomyt}" fakesize:"2" yaml:"video_url"
	VideoUrl []string `protobuf:"bytes,16,rep,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty" fake:"{randomyt}" fakesize:"2" yaml:"video_url"`
	// @inject_tag: fake:"{randomstring:[days,weeks,months]}" yaml:"unit_of_measures"
	UnitOfMeasures string `protobuf:"bytes,17,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty" fake:"{randomstring:[days,weeks,months]}" yaml:"unit_of_measures"`
	// @inject_tag: fake:"{nameseq:sys_account_project,true,sys_account_project,true,false}" yaml:"sys_account_project_ref_name"
	SysAccountProjectRefName string `protobuf:"bytes,18,opt,name=sys_account_project_ref_name,json=sysAccountProjectRefName,proto3" json:"sys_account_project_ref_name,omitempty" fake:"{nameseq:sys_account_project,true,sys_account_project,true,false}" yaml:"sys_account_project_ref_name"`
	// @inject_tag: fake:"{nameseq:sys_account_org,true,sys_account_org,false,false}" yaml:"sys_account_org_ref_name,omitempty"
	SysAccountOrgRefName string `protobuf:"bytes,19,opt,name=sys_account_org_ref_name,json=sysAccountOrgRefName,proto3" json:"sys_account_org_ref_name,omitempty" fake:"{nameseq:sys_account_org,true,sys_account_org,false,false}" yaml:"sys_account_org_ref_name,omitempty"`
	// @inject_tag: fake:"skip" yaml:"image_filepath,omitempty"
	ImageFilepath []string `protobuf:"bytes,20,rep,name=image_filepath,json=imageFilepath,proto3" json:"image_filepath,omitempty" fake:"skip" yaml:"image_filepath,omitempty"`
	// @inject_tag: fake:"{logogen:300}" yaml:"image_upload_arrays,omitempty"
	ImageUploadArrays []string `protobuf:"bytes,21,rep,name=image_upload_arrays,json=imageUploadArrays,proto3" json:"image_upload_arrays,omitempty" fake:"{logogen:300}" yaml:"image_upload_arrays,omitempty"`
}

func (x *NewDiscoProjectRequest) Reset() {
	*x = NewDiscoProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDiscoProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDiscoProjectRequest) ProtoMessage() {}

func (x *NewDiscoProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDiscoProjectRequest.ProtoReflect.Descriptor instead.
func (*NewDiscoProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{16}
}

func (x *NewDiscoProjectRequest) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetSysAccountOrgRefId() string {
	if x != nil {
		return x.SysAccountOrgRefId
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetAlreadyPledged() uint64 {
	if x != nil {
		return x.AlreadyPledged
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetActionTimeNano() int64 {
	if x != nil {
		return x.ActionTimeNano
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetActionLocation() string {
	if x != nil {
		return x.ActionLocation
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetMinPioneers() uint64 {
	if x != nil {
		return x.MinPioneers
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetMinRebelsMedia() uint64 {
	if x != nil {
		return x.MinRebelsMedia
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetMinRebelsToWin() uint64 {
	if x != nil {
		return x.MinRebelsToWin
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetActionLength() string {
	if x != nil {
		return x.ActionLength
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetHistPrecedents() string {
	if x != nil {
		return x.HistPrecedents
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetVideoUrl() []string {
	if x != nil {
		return x.VideoUrl
	}
	return nil
}

func (x *NewDiscoProjectRequest) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetSysAccountProjectRefName() string {
	if x != nil {
		return x.SysAccountProjectRefName
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetSysAccountOrgRefName() string {
	if x != nil {
		return x.SysAccountOrgRefName
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetImageFilepath() []string {
	if x != nil {
		return x.ImageFilepath
	}
	return nil
}

func (x *NewDiscoProjectRequest) GetImageUploadArrays() []string {
	if x != nil {
		return x.ImageUploadArrays
	}
	return nil
}

type UpdateDiscoProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Goal             string                 `protobuf:"bytes,2,opt,name=goal,proto3" json:"goal,omitempty"`
	AlreadyPledged   uint64                 `protobuf:"varint,3,opt,name=already_pledged,json=alreadyPledged,proto3" json:"already_pledged,omitempty"`
	ActionTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`
	ActionLocation   string                 `protobuf:"bytes,5,opt,name=action_location,json=actionLocation,proto3" json:"action_location,omitempty"`
	MinPioneers      uint64                 `protobuf:"varint,6,opt,name=min_pioneers,json=minPioneers,proto3" json:"min_pioneers,omitempty"`
	MinRebelsMedia   uint64                 `protobuf:"varint,7,opt,name=min_rebels_media,json=minRebelsMedia,proto3" json:"min_rebels_media,omitempty"`
	MinRebelsToWin   uint64                 `protobuf:"varint,8,opt,name=min_rebels_to_win,json=minRebelsToWin,proto3" json:"min_rebels_to_win,omitempty"`
	ActionLength     string                 `protobuf:"bytes,9,opt,name=action_length,json=actionLength,proto3" json:"action_length,omitempty"`
	ActionType       string                 `protobuf:"bytes,10,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Category         string                 `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	Contact          string                 `protobuf:"bytes,12,opt,name=contact,proto3" json:"contact,omitempty"`
	HistPrecedents   string                 `protobuf:"bytes,13,opt,name=hist_precedents,json=histPrecedents,proto3" json:"hist_precedents,omitempty"`
	Strategy         string                 `protobuf:"bytes,14,opt,name=strategy,proto3" json:"strategy,omitempty"`
	VideoUrl         string                 `protobuf:"bytes,15,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	UnitOfMeasures   string                 `protobuf:"bytes,16,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
	ImageUploads     [][]byte               `protobuf:"bytes,17,rep,name=image_uploads,json=imageUploads,proto3" json:"image_uploads,omitempty"`
	ImageResourceIds []string               `protobuf:"bytes,18,rep,name=image_resource_ids,json=imageResourceIds,proto3" json:"image_resource_ids,omitempty"`
}

func (x *UpdateDiscoProjectRequest) Reset() {
	*x = UpdateDiscoProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscoProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscoProjectRequest) ProtoMessage() {}

func (x *UpdateDiscoProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscoProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscoProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDiscoProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetAlreadyPledged() uint64 {
	if x != nil {
		return x.AlreadyPledged
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetActionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActionTime
	}
	return nil
}

func (x *UpdateDiscoProjectRequest) GetActionLocation() string {
	if x != nil {
		return x.ActionLocation
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetMinPioneers() uint64 {
	if x != nil {
		return x.MinPioneers
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetMinRebelsMedia() uint64 {
	if x != nil {
		return x.MinRebelsMedia
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetMinRebelsToWin() uint64 {
	if x != nil {
		return x.MinRebelsToWin
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetActionLength() string {
	if x != nil {
		return x.ActionLength
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetHistPrecedents() string {
	if x != nil {
		return x.HistPrecedents
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetImageUploads() [][]byte {
	if x != nil {
		return x.ImageUploads
	}
	return nil
}

func (x *UpdateDiscoProjectRequest) GetImageResourceIds() []string {
	if x != nil {
		return x.ImageResourceIds
	}
	return nil
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyUserId        string `protobuf:"bytes,1,opt,name=survey_user_id,json=surveyUserId,proto3" json:"survey_user_id,omitempty"`
	SysAccountProjectId string `protobuf:"bytes,2,opt,name=sys_account_project_id,json=sysAccountProjectId,proto3" json:"sys_account_project_id,omitempty"`
	SurveyProjectId     string `protobuf:"bytes,3,opt,name=survey_project_id,json=surveyProjectId,proto3" json:"survey_project_id,omitempty"`
	SysAccountAccountId string `protobuf:"bytes,4,opt,name=sys_account_account_id,json=sysAccountAccountId,proto3" json:"sys_account_account_id,omitempty"`
	DiscoProjectId      string `protobuf:"bytes,5,opt,name=disco_project_id,json=discoProjectId,proto3" json:"disco_project_id,omitempty"`
	SysAccountOrgId     string `protobuf:"bytes,6,opt,name=sys_account_org_id,json=sysAccountOrgId,proto3" json:"sys_account_org_id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{18}
}

func (x *IdRequest) GetSurveyUserId() string {
	if x != nil {
		return x.SurveyUserId
	}
	return ""
}

func (x *IdRequest) GetSysAccountProjectId() string {
	if x != nil {
		return x.SysAccountProjectId
	}
	return ""
}

func (x *IdRequest) GetSurveyProjectId() string {
	if x != nil {
		return x.SurveyProjectId
	}
	return ""
}

func (x *IdRequest) GetSysAccountAccountId() string {
	if x != nil {
		return x.SysAccountAccountId
	}
	return ""
}

func (x *IdRequest) GetDiscoProjectId() string {
	if x != nil {
		return x.DiscoProjectId
	}
	return ""
}

func (x *IdRequest) GetSysAccountOrgId() string {
	if x != nil {
		return x.SysAccountOrgId
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdRequest      *IdRequest `protobuf:"bytes,1,opt,name=id_request,json=idRequest,proto3" json:"id_request,omitempty"`
	PerPageEntries int64      `protobuf:"varint,2,opt,name=per_page_entries,json=perPageEntries,proto3" json:"per_page_entries,omitempty"`
	OrderBy        string     `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	CurrentPageId  string     `protobuf:"bytes,4,opt,name=current_page_id,json=currentPageId,proto3" json:"current_page_id,omitempty"`
	Filters        []byte     `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
	IsDescending   bool       `protobuf:"varint,6,opt,name=isDescending,proto3" json:"isDescending,omitempty"`
	Matcher        string     `protobuf:"bytes,7,opt,name=matcher,proto3" json:"matcher,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{19}
}

func (x *ListRequest) GetIdRequest() *IdRequest {
	if x != nil {
		return x.IdRequest
	}
	return nil
}

func (x *ListRequest) GetPerPageEntries() int64 {
	if x != nil {
		return x.PerPageEntries
	}
	return 0
}

func (x *ListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListRequest) GetCurrentPageId() string {
	if x != nil {
		return x.CurrentPageId
	}
	return ""
}

func (x *ListRequest) GetFilters() []byte {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListRequest) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListRequest) GetMatcher() string {
	if x != nil {
		return x.Matcher
	}
	return ""
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjects []*SurveyProject `protobuf:"bytes,1,rep,name=survey_projects,json=surveyProjects,proto3" json:"survey_projects,omitempty"`
	SurveyUsers    []*SurveyUser    `protobuf:"bytes,2,rep,name=survey_users,json=surveyUsers,proto3" json:"survey_users,omitempty"`
	NextPageId     int64            `protobuf:"varint,3,opt,name=next_page_id,json=nextPageId,proto3" json:"next_page_id,omitempty"`
	DiscoProjects  []*DiscoProject  `protobuf:"bytes,4,rep,name=disco_projects,json=discoProjects,proto3" json:"disco_projects,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{20}
}

func (x *ListResponse) GetSurveyProjects() []*SurveyProject {
	if x != nil {
		return x.SurveyProjects
	}
	return nil
}

func (x *ListResponse) GetSurveyUsers() []*SurveyUser {
	if x != nil {
		return x.SurveyUsers
	}
	return nil
}

func (x *ListResponse) GetNextPageId() int64 {
	if x != nil {
		return x.NextPageId
	}
	return 0
}

func (x *ListResponse) GetDiscoProjects() []*DiscoProject {
	if x != nil {
		return x.DiscoProjects
	}
	return nil
}

type NewSurveyProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"sys_account_project_ref_id,omitempty"
	SysAccountProjectRefId string `protobuf:"bytes,1,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty" fake:"skip" yaml:"sys_account_project_ref_id,omitempty"`
	// @inject_tag: fakesize:"5" yaml:"support_role_types"
	SupportRoleTypes []*NewSupportRoleType `protobuf:"bytes,2,rep,name=support_role_types,json=supportRoleTypes,proto3" json:"support_role_types,omitempty" fakesize:"5" yaml:"support_role_types"`
	// @inject_tag: fakesize:"5" yaml:"user_need_types"
	UserNeedTypes []*NewUserNeedsType `protobuf:"bytes,3,rep,name=user_need_types,json=userNeedTypes,proto3" json:"user_need_types,omitempty" fakesize:"5" yaml:"user_need_types"`
	// @inject_tag: fake:"{nameseq:sys_account_project,true,sys_account_project,true,false}" yaml:"sys_account_project_ref_name"
	SysAccountProjectRefName string `protobuf:"bytes,4,opt,name=sys_account_project_ref_name,json=sysAccountProjectRefName,proto3" json:"sys_account_project_ref_name,omitempty" fake:"{nameseq:sys_account_project,true,sys_account_project,true,false}" yaml:"sys_account_project_ref_name"`
	// @inject_tag: fake:"{nameseq:survey_project,false,none,false,false}" yaml:"survey_project_name"
	SurveyProjectName string `protobuf:"bytes,5,opt,name=survey_project_name,json=surveyProjectName,proto3" json:"survey_project_name,omitempty" fake:"{nameseq:survey_project,false,none,false,false}" yaml:"survey_project_name"`
}

func (x *NewSurveyProjectRequest) Reset() {
	*x = NewSurveyProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSurveyProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSurveyProjectRequest) ProtoMessage() {}

func (x *NewSurveyProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSurveyProjectRequest.ProtoReflect.Descriptor instead.
func (*NewSurveyProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{21}
}

func (x *NewSurveyProjectRequest) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *NewSurveyProjectRequest) GetSupportRoleTypes() []*NewSupportRoleType {
	if x != nil {
		return x.SupportRoleTypes
	}
	return nil
}

func (x *NewSurveyProjectRequest) GetUserNeedTypes() []*NewUserNeedsType {
	if x != nil {
		return x.UserNeedTypes
	}
	return nil
}

func (x *NewSurveyProjectRequest) GetSysAccountProjectRefName() string {
	if x != nil {
		return x.SysAccountProjectRefName
	}
	return ""
}

func (x *NewSurveyProjectRequest) GetSurveyProjectName() string {
	if x != nil {
		return x.SurveyProjectName
	}
	return ""
}

type NewSurveyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: fake:"skip" yaml:"survey_project_ref_id,omitempty"
	SurveyProjectRefId string `protobuf:"bytes,1,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty" fake:"skip" yaml:"survey_project_ref_id,omitempty"`
	// @inject_tag: fake:"skip" yaml:"sys_account_user_ref_id,omitempty"
	SysAccountUserRefId string `protobuf:"bytes,2,opt,name=sys_account_user_ref_id,json=sysAccountUserRefId,proto3" json:"sys_account_user_ref_id,omitempty" fake:"skip" yaml:"sys_account_user_ref_id,omitempty"`
	// @inject_tag: fakesize:"5" yaml:"support_role_values"
	SupportRoleValues []*NewSupportRoleValue `protobuf:"bytes,3,rep,name=support_role_values,json=supportRoleValues,proto3" json:"support_role_values,omitempty" fakesize:"5" yaml:"support_role_values"`
	// @inject_tag: fakesize:"5" yaml:"user_need_values"
	UserNeedValues []*NewUserNeedsValue `protobuf:"bytes,4,rep,name=user_need_values,json=userNeedValues,proto3" json:"user_need_values,omitempty" fakesize:"5" yaml:"user_need_values"`
	// @inject_tag: fake:"{nameseq:survey_project,true,survey_project,false,false}" yaml:"survey_project_ref_name"
	SurveyProjectRefName string `protobuf:"bytes,5,opt,name=survey_project_ref_name,json=surveyProjectRefName,proto3" json:"survey_project_ref_name,omitempty" fake:"{nameseq:survey_project,true,survey_project,false,false}" yaml:"survey_project_ref_name"`
	// @inject_tag: fake:"{mailseq:user,true,sys_account_email,true}" yaml:"sys_account_user_ref_name"
	SysAccountUserRefName string `protobuf:"bytes,6,opt,name=sys_account_user_ref_name,json=sysAccountUserRefName,proto3" json:"sys_account_user_ref_name,omitempty" fake:"{mailseq:user,true,sys_account_email,true}" yaml:"sys_account_user_ref_name"`
	// @inject_tag: fake:"{nameseq:survey_user,false,none,false,false}" yaml:"survey_user_name"
	SurveyUserName string `protobuf:"bytes,7,opt,name=survey_user_name,json=surveyUserName,proto3" json:"survey_user_name,omitempty" fake:"{nameseq:survey_user,false,none,false,false}" yaml:"survey_user_name"`
}

func (x *NewSurveyUserRequest) Reset() {
	*x = NewSurveyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSurveyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSurveyUserRequest) ProtoMessage() {}

func (x *NewSurveyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSurveyUserRequest.ProtoReflect.Descriptor instead.
func (*NewSurveyUserRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{22}
}

func (x *NewSurveyUserRequest) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *NewSurveyUserRequest) GetSysAccountUserRefId() string {
	if x != nil {
		return x.SysAccountUserRefId
	}
	return ""
}

func (x *NewSurveyUserRequest) GetSupportRoleValues() []*NewSupportRoleValue {
	if x != nil {
		return x.SupportRoleValues
	}
	return nil
}

func (x *NewSurveyUserRequest) GetUserNeedValues() []*NewUserNeedsValue {
	if x != nil {
		return x.UserNeedValues
	}
	return nil
}

func (x *NewSurveyUserRequest) GetSurveyProjectRefName() string {
	if x != nil {
		return x.SurveyProjectRefName
	}
	return ""
}

func (x *NewSurveyUserRequest) GetSysAccountUserRefName() string {
	if x != nil {
		return x.SysAccountUserRefName
	}
	return ""
}

func (x *NewSurveyUserRequest) GetSurveyUserName() string {
	if x != nil {
		return x.SurveyUserName
	}
	return ""
}

type UpdateSurveyProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjectId  string             `protobuf:"bytes,1,opt,name=survey_project_id,json=surveyProjectId,proto3" json:"survey_project_id,omitempty"`
	SupportRoleTypes []*SupportRoleType `protobuf:"bytes,2,rep,name=support_role_types,json=supportRoleTypes,proto3" json:"support_role_types,omitempty"`
	UserNeedTypes    []*UserNeedsType   `protobuf:"bytes,3,rep,name=user_need_types,json=userNeedTypes,proto3" json:"user_need_types,omitempty"`
}

func (x *UpdateSurveyProjectRequest) Reset() {
	*x = UpdateSurveyProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyProjectRequest) ProtoMessage() {}

func (x *UpdateSurveyProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSurveyProjectRequest) GetSurveyProjectId() string {
	if x != nil {
		return x.SurveyProjectId
	}
	return ""
}

func (x *UpdateSurveyProjectRequest) GetSupportRoleTypes() []*SupportRoleType {
	if x != nil {
		return x.SupportRoleTypes
	}
	return nil
}

func (x *UpdateSurveyProjectRequest) GetUserNeedTypes() []*UserNeedsType {
	if x != nil {
		return x.UserNeedTypes
	}
	return nil
}

type UpdateSurveyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyUserId      string              `protobuf:"bytes,1,opt,name=survey_user_id,json=surveyUserId,proto3" json:"survey_user_id,omitempty"`
	SupportRoleValues []*SupportRoleValue `protobuf:"bytes,2,rep,name=support_role_values,json=supportRoleValues,proto3" json:"support_role_values,omitempty"`
	UserNeedValues    []*UserNeedsValue   `protobuf:"bytes,3,rep,name=user_need_values,json=userNeedValues,proto3" json:"user_need_values,omitempty"`
}

func (x *UpdateSurveyUserRequest) Reset() {
	*x = UpdateSurveyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyUserRequest) ProtoMessage() {}

func (x *UpdateSurveyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyUserRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateSurveyUserRequest) GetSurveyUserId() string {
	if x != nil {
		return x.SurveyUserId
	}
	return ""
}

func (x *UpdateSurveyUserRequest) GetSupportRoleValues() []*SupportRoleValue {
	if x != nil {
		return x.SupportRoleValues
	}
	return nil
}

func (x *UpdateSurveyUserRequest) GetUserNeedValues() []*UserNeedsValue {
	if x != nil {
		return x.UserNeedValues
	}
	return nil
}

type GenIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TempId string `protobuf:"bytes,1,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`
}

func (x *GenIdResponse) Reset() {
	*x = GenIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenIdResponse) ProtoMessage() {}

func (x *GenIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenIdResponse.ProtoReflect.Descriptor instead.
func (*GenIdResponse) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{25}
}

func (x *GenIdResponse) GetTempId() string {
	if x != nil {
		return x.TempId
	}
	return ""
}

type StatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IncludeCounts  bool   `protobuf:"varint,2,opt,name=include_counts,json=includeCounts,proto3" json:"include_counts,omitempty"`
	Filters        []byte `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"` // json
	CurrentPageId  string `protobuf:"bytes,4,opt,name=current_page_id,json=currentPageId,proto3" json:"current_page_id,omitempty"`
	Limit          int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderBy        string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending   bool   `protobuf:"varint,7,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	PerPageEntries int64  `protobuf:"varint,8,opt,name=per_page_entries,json=perPageEntries,proto3" json:"per_page_entries,omitempty"`
}

func (x *StatisticRequest) Reset() {
	*x = StatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticRequest) ProtoMessage() {}

func (x *StatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticRequest.ProtoReflect.Descriptor instead.
func (*StatisticRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{26}
}

func (x *StatisticRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StatisticRequest) GetIncludeCounts() bool {
	if x != nil {
		return x.IncludeCounts
	}
	return false
}

func (x *StatisticRequest) GetFilters() []byte {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *StatisticRequest) GetCurrentPageId() string {
	if x != nil {
		return x.CurrentPageId
	}
	return ""
}

func (x *StatisticRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StatisticRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *StatisticRequest) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *StatisticRequest) GetPerPageEntries() int64 {
	if x != nil {
		return x.PerPageEntries
	}
	return 0
}

type StatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyValuePlusAccount []*SurveyValuePlusAccount `protobuf:"bytes,1,rep,name=survey_value_plus_account,json=surveyValuePlusAccount,proto3" json:"survey_value_plus_account,omitempty"`
	NextPageId             string                    `protobuf:"bytes,2,opt,name=next_page_id,json=nextPageId,proto3" json:"next_page_id,omitempty"`
	TotalCount             int64                     `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *StatisticResponse) Reset() {
	*x = StatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticResponse) ProtoMessage() {}

func (x *StatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticResponse.ProtoReflect.Descriptor instead.
func (*StatisticResponse) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{27}
}

func (x *StatisticResponse) GetSurveyValuePlusAccount() []*SurveyValuePlusAccount {
	if x != nil {
		return x.SurveyValuePlusAccount
	}
	return nil
}

func (x *StatisticResponse) GetNextPageId() string {
	if x != nil {
		return x.NextPageId
	}
	return ""
}

func (x *StatisticResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_mod_disco_models_proto protoreflect.FileDescriptor

var file_mod_disco_models_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xab, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a,
	0x12, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xeb,
	0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x12, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73,
	0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xab, 0x02,
	0x0a, 0x13, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74,
	0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x72,
	0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d,
	0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb7,
	0x01, 0x0a, 0x16, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x6c,
	0x75, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x79, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x79,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x32, 0x2e,
	0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x0a, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x13,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x32, 0x2e, 0x6d,
	0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x07,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x79, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x69, 0x6f, 0x6e, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c,
	0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x29, 0x0a,
	0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62,
	0x65, 0x6c, 0x73, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe7, 0x06, 0x0a, 0x16,
	0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69,
	0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x79,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x73, 0x22, 0xb0, 0x05, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x6f,
	0x6e, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x09, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12,
	0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22,
	0x91, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x32, 0x2e, 0x6d,
	0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x12, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x79, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x03, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x77,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x19, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a,
	0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x32, 0x2e, 0x6d,
	0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76,
	0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x28, 0x0a,
	0x0d, 0x47, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x6c, 0x75, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x16, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x6f, 0x2e, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x79, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6d, 0x6f,
	0x64, 0x2d, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x32,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mod_disco_models_proto_rawDescOnce sync.Once
	file_mod_disco_models_proto_rawDescData = file_mod_disco_models_proto_rawDesc
)

func file_mod_disco_models_proto_rawDescGZIP() []byte {
	file_mod_disco_models_proto_rawDescOnce.Do(func() {
		file_mod_disco_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_mod_disco_models_proto_rawDescData)
	})
	return file_mod_disco_models_proto_rawDescData
}

var file_mod_disco_models_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_mod_disco_models_proto_goTypes = []interface{}{
	(*UserInfo)(nil),                   // 0: v2.mod_disco.services.UserInfo
	(*NewUserInfo)(nil),                // 1: v2.mod_disco.services.NewUserInfo
	(*UpdateUserInfo)(nil),             // 2: v2.mod_disco.services.UpdateUserInfo
	(*UserInfoValues)(nil),             // 3: v2.mod_disco.services.UserInfoValues
	(*SupportRoleType)(nil),            // 4: v2.mod_disco.services.SupportRoleType
	(*NewSupportRoleType)(nil),         // 5: v2.mod_disco.services.NewSupportRoleType
	(*SupportRoleValue)(nil),           // 6: v2.mod_disco.services.SupportRoleValue
	(*NewSupportRoleValue)(nil),        // 7: v2.mod_disco.services.NewSupportRoleValue
	(*UserNeedsType)(nil),              // 8: v2.mod_disco.services.UserNeedsType
	(*NewUserNeedsType)(nil),           // 9: v2.mod_disco.services.NewUserNeedsType
	(*UserNeedsValue)(nil),             // 10: v2.mod_disco.services.UserNeedsValue
	(*SurveyValuePlusAccount)(nil),     // 11: v2.mod_disco.services.SurveyValuePlusAccount
	(*NewUserNeedsValue)(nil),          // 12: v2.mod_disco.services.NewUserNeedsValue
	(*SurveyProject)(nil),              // 13: v2.mod_disco.services.SurveyProject
	(*SurveyUser)(nil),                 // 14: v2.mod_disco.services.SurveyUser
	(*DiscoProject)(nil),               // 15: v2.mod_disco.services.DiscoProject
	(*NewDiscoProjectRequest)(nil),     // 16: v2.mod_disco.services.NewDiscoProjectRequest
	(*UpdateDiscoProjectRequest)(nil),  // 17: v2.mod_disco.services.UpdateDiscoProjectRequest
	(*IdRequest)(nil),                  // 18: v2.mod_disco.services.IdRequest
	(*ListRequest)(nil),                // 19: v2.mod_disco.services.ListRequest
	(*ListResponse)(nil),               // 20: v2.mod_disco.services.ListResponse
	(*NewSurveyProjectRequest)(nil),    // 21: v2.mod_disco.services.NewSurveyProjectRequest
	(*NewSurveyUserRequest)(nil),       // 22: v2.mod_disco.services.NewSurveyUserRequest
	(*UpdateSurveyProjectRequest)(nil), // 23: v2.mod_disco.services.UpdateSurveyProjectRequest
	(*UpdateSurveyUserRequest)(nil),    // 24: v2.mod_disco.services.UpdateSurveyUserRequest
	(*GenIdResponse)(nil),              // 25: v2.mod_disco.services.GenIdResponse
	(*StatisticRequest)(nil),           // 26: v2.mod_disco.services.StatisticRequest
	(*StatisticResponse)(nil),          // 27: v2.mod_disco.services.StatisticResponse
	(*timestamppb.Timestamp)(nil),      // 28: google.protobuf.Timestamp
}
var file_mod_disco_models_proto_depIdxs = []int32{
	28, // 0: v2.mod_disco.services.UserInfo.created_at:type_name -> google.protobuf.Timestamp
	28, // 1: v2.mod_disco.services.UserInfo.updated_at:type_name -> google.protobuf.Timestamp
	28, // 2: v2.mod_disco.services.SurveyValuePlusAccount.created_at:type_name -> google.protobuf.Timestamp
	4,  // 3: v2.mod_disco.services.SurveyProject.support_role_types:type_name -> v2.mod_disco.services.SupportRoleType
	8,  // 4: v2.mod_disco.services.SurveyProject.user_need_types:type_name -> v2.mod_disco.services.UserNeedsType
	28, // 5: v2.mod_disco.services.SurveyProject.created_at:type_name -> google.protobuf.Timestamp
	28, // 6: v2.mod_disco.services.SurveyProject.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 7: v2.mod_disco.services.SurveyUser.support_role_values:type_name -> v2.mod_disco.services.SupportRoleValue
	10, // 8: v2.mod_disco.services.SurveyUser.user_need_values:type_name -> v2.mod_disco.services.UserNeedsValue
	28, // 9: v2.mod_disco.services.SurveyUser.created_at:type_name -> google.protobuf.Timestamp
	28, // 10: v2.mod_disco.services.SurveyUser.updated_at:type_name -> google.protobuf.Timestamp
	28, // 11: v2.mod_disco.services.DiscoProject.action_time:type_name -> google.protobuf.Timestamp
	28, // 12: v2.mod_disco.services.DiscoProject.created_at:type_name -> google.protobuf.Timestamp
	28, // 13: v2.mod_disco.services.DiscoProject.updated_at:type_name -> google.protobuf.Timestamp
	28, // 14: v2.mod_disco.services.UpdateDiscoProjectRequest.action_time:type_name -> google.protobuf.Timestamp
	18, // 15: v2.mod_disco.services.ListRequest.id_request:type_name -> v2.mod_disco.services.IdRequest
	13, // 16: v2.mod_disco.services.ListResponse.survey_projects:type_name -> v2.mod_disco.services.SurveyProject
	14, // 17: v2.mod_disco.services.ListResponse.survey_users:type_name -> v2.mod_disco.services.SurveyUser
	15, // 18: v2.mod_disco.services.ListResponse.disco_projects:type_name -> v2.mod_disco.services.DiscoProject
	5,  // 19: v2.mod_disco.services.NewSurveyProjectRequest.support_role_types:type_name -> v2.mod_disco.services.NewSupportRoleType
	9,  // 20: v2.mod_disco.services.NewSurveyProjectRequest.user_need_types:type_name -> v2.mod_disco.services.NewUserNeedsType
	7,  // 21: v2.mod_disco.services.NewSurveyUserRequest.support_role_values:type_name -> v2.mod_disco.services.NewSupportRoleValue
	12, // 22: v2.mod_disco.services.NewSurveyUserRequest.user_need_values:type_name -> v2.mod_disco.services.NewUserNeedsValue
	4,  // 23: v2.mod_disco.services.UpdateSurveyProjectRequest.support_role_types:type_name -> v2.mod_disco.services.SupportRoleType
	8,  // 24: v2.mod_disco.services.UpdateSurveyProjectRequest.user_need_types:type_name -> v2.mod_disco.services.UserNeedsType
	6,  // 25: v2.mod_disco.services.UpdateSurveyUserRequest.support_role_values:type_name -> v2.mod_disco.services.SupportRoleValue
	10, // 26: v2.mod_disco.services.UpdateSurveyUserRequest.user_need_values:type_name -> v2.mod_disco.services.UserNeedsValue
	11, // 27: v2.mod_disco.services.StatisticResponse.survey_value_plus_account:type_name -> v2.mod_disco.services.SurveyValuePlusAccount
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_mod_disco_models_proto_init() }
func file_mod_disco_models_proto_init() {
	if File_mod_disco_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mod_disco_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportRoleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSupportRoleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportRoleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSupportRoleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNeedsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserNeedsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNeedsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyValuePlusAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserNeedsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDiscoProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscoProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSurveyProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSurveyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mod_disco_models_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mod_disco_models_proto_goTypes,
		DependencyIndexes: file_mod_disco_models_proto_depIdxs,
		MessageInfos:      file_mod_disco_models_proto_msgTypes,
	}.Build()
	File_mod_disco_models_proto = out.File
	file_mod_disco_models_proto_rawDesc = nil
	file_mod_disco_models_proto_goTypes = nil
	file_mod_disco_models_proto_depIdxs = nil
}
