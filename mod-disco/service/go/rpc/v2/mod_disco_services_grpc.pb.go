// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	// Projects
	NewSurveyProject(ctx context.Context, in *NewSurveyProjectRequest, opts ...grpc.CallOption) (*SurveyProject, error)
	GetSurveyProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SurveyProject, error)
	ListSurveyProject(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	UpdateSurveyProject(ctx context.Context, in *UpdateSurveyProjectRequest, opts ...grpc.CallOption) (*SurveyProject, error)
	DeleteSurveyProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Users
	NewSurveyUser(ctx context.Context, in *NewSurveyUserRequest, opts ...grpc.CallOption) (*SurveyUser, error)
	GetSurveyUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SurveyUser, error)
	ListSurveyUser(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	UpdateSurveyUser(ctx context.Context, in *UpdateSurveyUserRequest, opts ...grpc.CallOption) (*SurveyUser, error)
	DeleteSurveyUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProjectStatistics(ctx context.Context, in *StatisticRequest, opts ...grpc.CallOption) (*StatisticResponse, error)
	// DiscoProjects
	NewDiscoProject(ctx context.Context, in *NewDiscoProjectRequest, opts ...grpc.CallOption) (*DiscoProject, error)
	GetDiscoProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DiscoProject, error)
	ListDiscoProject(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	UpdateDiscoProject(ctx context.Context, in *UpdateDiscoProjectRequest, opts ...grpc.CallOption) (*DiscoProject, error)
	DeleteDiscoProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// TempIdRequest
	GenTempId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenIdResponse, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) NewSurveyProject(ctx context.Context, in *NewSurveyProjectRequest, opts ...grpc.CallOption) (*SurveyProject, error) {
	out := new(SurveyProject)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/NewSurveyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SurveyProject, error) {
	out := new(SurveyProject)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/GetSurveyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ListSurveyProject(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/ListSurveyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) UpdateSurveyProject(ctx context.Context, in *UpdateSurveyProjectRequest, opts ...grpc.CallOption) (*SurveyProject, error) {
	out := new(SurveyProject)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/UpdateSurveyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) DeleteSurveyProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/DeleteSurveyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) NewSurveyUser(ctx context.Context, in *NewSurveyUserRequest, opts ...grpc.CallOption) (*SurveyUser, error) {
	out := new(SurveyUser)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/NewSurveyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SurveyUser, error) {
	out := new(SurveyUser)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/GetSurveyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ListSurveyUser(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/ListSurveyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) UpdateSurveyUser(ctx context.Context, in *UpdateSurveyUserRequest, opts ...grpc.CallOption) (*SurveyUser, error) {
	out := new(SurveyUser)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/UpdateSurveyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) DeleteSurveyUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/DeleteSurveyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetProjectStatistics(ctx context.Context, in *StatisticRequest, opts ...grpc.CallOption) (*StatisticResponse, error) {
	out := new(StatisticResponse)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/GetProjectStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) NewDiscoProject(ctx context.Context, in *NewDiscoProjectRequest, opts ...grpc.CallOption) (*DiscoProject, error) {
	out := new(DiscoProject)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/NewDiscoProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetDiscoProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DiscoProject, error) {
	out := new(DiscoProject)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/GetDiscoProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ListDiscoProject(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/ListDiscoProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) UpdateDiscoProject(ctx context.Context, in *UpdateDiscoProjectRequest, opts ...grpc.CallOption) (*DiscoProject, error) {
	out := new(DiscoProject)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/UpdateDiscoProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) DeleteDiscoProject(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/DeleteDiscoProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GenTempId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenIdResponse, error) {
	out := new(GenIdResponse)
	err := c.cc.Invoke(ctx, "/v2.mod_disco.services.SurveyService/GenTempId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility
type SurveyServiceServer interface {
	// Projects
	NewSurveyProject(context.Context, *NewSurveyProjectRequest) (*SurveyProject, error)
	GetSurveyProject(context.Context, *IdRequest) (*SurveyProject, error)
	ListSurveyProject(context.Context, *ListRequest) (*ListResponse, error)
	UpdateSurveyProject(context.Context, *UpdateSurveyProjectRequest) (*SurveyProject, error)
	DeleteSurveyProject(context.Context, *IdRequest) (*emptypb.Empty, error)
	// Users
	NewSurveyUser(context.Context, *NewSurveyUserRequest) (*SurveyUser, error)
	GetSurveyUser(context.Context, *IdRequest) (*SurveyUser, error)
	ListSurveyUser(context.Context, *ListRequest) (*ListResponse, error)
	UpdateSurveyUser(context.Context, *UpdateSurveyUserRequest) (*SurveyUser, error)
	DeleteSurveyUser(context.Context, *IdRequest) (*emptypb.Empty, error)
	GetProjectStatistics(context.Context, *StatisticRequest) (*StatisticResponse, error)
	// DiscoProjects
	NewDiscoProject(context.Context, *NewDiscoProjectRequest) (*DiscoProject, error)
	GetDiscoProject(context.Context, *IdRequest) (*DiscoProject, error)
	ListDiscoProject(context.Context, *ListRequest) (*ListResponse, error)
	UpdateDiscoProject(context.Context, *UpdateDiscoProjectRequest) (*DiscoProject, error)
	DeleteDiscoProject(context.Context, *IdRequest) (*emptypb.Empty, error)
	// TempIdRequest
	GenTempId(context.Context, *emptypb.Empty) (*GenIdResponse, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyServiceServer struct {
}

func (UnimplementedSurveyServiceServer) NewSurveyProject(context.Context, *NewSurveyProjectRequest) (*SurveyProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSurveyProject not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyProject(context.Context, *IdRequest) (*SurveyProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyProject not implemented")
}
func (UnimplementedSurveyServiceServer) ListSurveyProject(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyProject not implemented")
}
func (UnimplementedSurveyServiceServer) UpdateSurveyProject(context.Context, *UpdateSurveyProjectRequest) (*SurveyProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyProject not implemented")
}
func (UnimplementedSurveyServiceServer) DeleteSurveyProject(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSurveyProject not implemented")
}
func (UnimplementedSurveyServiceServer) NewSurveyUser(context.Context, *NewSurveyUserRequest) (*SurveyUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSurveyUser not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyUser(context.Context, *IdRequest) (*SurveyUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyUser not implemented")
}
func (UnimplementedSurveyServiceServer) ListSurveyUser(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyUser not implemented")
}
func (UnimplementedSurveyServiceServer) UpdateSurveyUser(context.Context, *UpdateSurveyUserRequest) (*SurveyUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyUser not implemented")
}
func (UnimplementedSurveyServiceServer) DeleteSurveyUser(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSurveyUser not implemented")
}
func (UnimplementedSurveyServiceServer) GetProjectStatistics(context.Context, *StatisticRequest) (*StatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectStatistics not implemented")
}
func (UnimplementedSurveyServiceServer) NewDiscoProject(context.Context, *NewDiscoProjectRequest) (*DiscoProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDiscoProject not implemented")
}
func (UnimplementedSurveyServiceServer) GetDiscoProject(context.Context, *IdRequest) (*DiscoProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoProject not implemented")
}
func (UnimplementedSurveyServiceServer) ListDiscoProject(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscoProject not implemented")
}
func (UnimplementedSurveyServiceServer) UpdateDiscoProject(context.Context, *UpdateDiscoProjectRequest) (*DiscoProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscoProject not implemented")
}
func (UnimplementedSurveyServiceServer) DeleteDiscoProject(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiscoProject not implemented")
}
func (UnimplementedSurveyServiceServer) GenTempId(context.Context, *emptypb.Empty) (*GenIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenTempId not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_NewSurveyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSurveyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).NewSurveyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/NewSurveyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).NewSurveyProject(ctx, req.(*NewSurveyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/GetSurveyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyProject(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_ListSurveyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).ListSurveyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/ListSurveyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).ListSurveyProject(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_UpdateSurveyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).UpdateSurveyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/UpdateSurveyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).UpdateSurveyProject(ctx, req.(*UpdateSurveyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_DeleteSurveyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).DeleteSurveyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/DeleteSurveyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).DeleteSurveyProject(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_NewSurveyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSurveyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).NewSurveyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/NewSurveyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).NewSurveyUser(ctx, req.(*NewSurveyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/GetSurveyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_ListSurveyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).ListSurveyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/ListSurveyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).ListSurveyUser(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_UpdateSurveyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).UpdateSurveyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/UpdateSurveyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).UpdateSurveyUser(ctx, req.(*UpdateSurveyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_DeleteSurveyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).DeleteSurveyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/DeleteSurveyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).DeleteSurveyUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetProjectStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetProjectStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/GetProjectStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetProjectStatistics(ctx, req.(*StatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_NewDiscoProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDiscoProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).NewDiscoProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/NewDiscoProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).NewDiscoProject(ctx, req.(*NewDiscoProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetDiscoProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetDiscoProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/GetDiscoProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetDiscoProject(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_ListDiscoProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).ListDiscoProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/ListDiscoProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).ListDiscoProject(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_UpdateDiscoProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiscoProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).UpdateDiscoProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/UpdateDiscoProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).UpdateDiscoProject(ctx, req.(*UpdateDiscoProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_DeleteDiscoProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).DeleteDiscoProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/DeleteDiscoProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).DeleteDiscoProject(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GenTempId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GenTempId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.mod_disco.services.SurveyService/GenTempId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GenTempId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.mod_disco.services.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSurveyProject",
			Handler:    _SurveyService_NewSurveyProject_Handler,
		},
		{
			MethodName: "GetSurveyProject",
			Handler:    _SurveyService_GetSurveyProject_Handler,
		},
		{
			MethodName: "ListSurveyProject",
			Handler:    _SurveyService_ListSurveyProject_Handler,
		},
		{
			MethodName: "UpdateSurveyProject",
			Handler:    _SurveyService_UpdateSurveyProject_Handler,
		},
		{
			MethodName: "DeleteSurveyProject",
			Handler:    _SurveyService_DeleteSurveyProject_Handler,
		},
		{
			MethodName: "NewSurveyUser",
			Handler:    _SurveyService_NewSurveyUser_Handler,
		},
		{
			MethodName: "GetSurveyUser",
			Handler:    _SurveyService_GetSurveyUser_Handler,
		},
		{
			MethodName: "ListSurveyUser",
			Handler:    _SurveyService_ListSurveyUser_Handler,
		},
		{
			MethodName: "UpdateSurveyUser",
			Handler:    _SurveyService_UpdateSurveyUser_Handler,
		},
		{
			MethodName: "DeleteSurveyUser",
			Handler:    _SurveyService_DeleteSurveyUser_Handler,
		},
		{
			MethodName: "GetProjectStatistics",
			Handler:    _SurveyService_GetProjectStatistics_Handler,
		},
		{
			MethodName: "NewDiscoProject",
			Handler:    _SurveyService_NewDiscoProject_Handler,
		},
		{
			MethodName: "GetDiscoProject",
			Handler:    _SurveyService_GetDiscoProject_Handler,
		},
		{
			MethodName: "ListDiscoProject",
			Handler:    _SurveyService_ListDiscoProject_Handler,
		},
		{
			MethodName: "UpdateDiscoProject",
			Handler:    _SurveyService_UpdateDiscoProject_Handler,
		},
		{
			MethodName: "DeleteDiscoProject",
			Handler:    _SurveyService_DeleteDiscoProject_Handler,
		},
		{
			MethodName: "GenTempId",
			Handler:    _SurveyService_GenTempId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mod_disco_services.proto",
}
